# Default configuration for pre-requisites to get you started
# Copy this file and update to the configuration of choice
elasticsearch:
  image: "314716043882.dkr.ecr.ap-northeast-2.amazonaws.com/dataplatform/rivendell"
  imageTag: "elas-s3-7.16.2"

  keystore:
    - secretName: s3-access-key
    - secretName: s3-secret-key

  enabled: true   # set this to false, if you want to provide your own ES instance.
  replicas: 3
  minimumMasterNodes: 1
  # Set replicas to 1 and uncomment this to allow the instance to be scheduled on
  # a master node when deploying on a single node Minikube / Kind / etc cluster.
  # antiAffinity: "soft"

  # # If your running a single replica cluster add the following helm value
  # clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"

  # Shrink default JVM heap.
  esJavaOpts: "-Xmx14g -Xms14g"

  # Allocate smaller chunks of memory per pod.
  resources:
    requests:
      cpu: "2000m"
      memory: "16Gi"
    limits: ~

  # Request smaller persistent volumes.
  volumeClaimTemplate:
#    accessModes: ["ReadWriteOnce"]
#    storageClassName: "standard"
    resources:
      requests:
        storage: 100Gi
  nodeSelector:
    kubernetes.io/arch: amd64

# Official neo4j chart uses the Neo4j Enterprise Edition which requires a license
neo4j:
  enabled: false  # set this to true, if you have a license for the enterprise edition
  acceptLicenseAgreement: "yes"
  defaultDatabase: "graph.db"
  neo4jPassword: "datahub"
  # For better security, add password to neo4j-secrets k8s secret and uncomment below
  # existingPasswordSecret: neo4j-secrets
  core:
    standalone: true

# Deploys neo4j community version. Only supports single node
neo4j-community:
  enabled: false   # set this to false, if you have a license for the enterprise edition
  acceptLicenseAgreement: "yes"
  defaultDatabase: "graph.db"
  # For better security, add neo4j-secrets k8s secret with neo4j-password and uncomment below
  existingPasswordSecret: neo4j-secrets
  nodeSelector:
    kubernetes.io/arch: amd64
  resources:
    requests:
      cpu: 1000m
      memory: 8Gi
  persistentVolume:
    size: 100Gi

mysql:
  enabled: true
  auth:
    # For better security, add mysql-secrets k8s secret with mysql-root-password, mysql-replication-password and mysql-password
    existingSecret: mysql-secrets
  primary:
    nodeSelector:
      kubernetes.io/arch: amd64
    resources:
      requests:
        cpu: 1000m
        memory: 8Gi
    persistence:
      size: 300Gi

postgresql:
  enabled: false
  auth:
    # For better security, add postgresql-secrets k8s secret with postgres-password, replication-password and password
    existingSecret: postgresql-secrets

cp-helm-charts:
  # Schema registry is under the community license
  cp-schema-registry:
    enabled: true
    kafka:
      bootstrapServers: "prerequisites-kafka:9092"  # <<release-name>>-kafka:9092
    heapOptions: "-Xms1024M -Xmx1024M"
    nodeSelector:
      kubernetes.io/arch: amd64
    resources:
      requests:
        cpu: 666m
        memory: 1.333Gi
  cp-kafka:
    enabled: false
  cp-zookeeper:
    enabled: false
  cp-kafka-rest:
    enabled: false
  cp-kafka-connect:
    enabled: false
  cp-ksql-server:
    enabled: false
  cp-control-center:
    enabled: false

# Bitnami version of Kafka that deploys open source Kafka https://artifacthub.io/packages/helm/bitnami/kafka
kafka:
  enabled: true
  nodeSelector:
    kubernetes.io/arch: amd64
  resources:
    requests:
      cpu: 500m
      memory: 4Gi
  persistence:
    size: 100Gi
  replicaCount: 3
  heapOpts: -Xmx3072m -Xms3072m
  podAntiAffinityPreset: hard
  zookeeper:
    nodeSelector:
      kubernetes.io/arch: amd64
    resources:
      requests:
        cpu: 666m
        memory: 1.333Gi
    persistence:
      size: 100Gi
